// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go
//
// Generated by this command:
//
//	mockgen -source=ports.go -destination=../handler/rest/handler_mock_test.go -package=rest
//

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	dto "github.com/hilmiikhsan/multifinance-service/internal/module/transaction/dto"
	entity "github.com/hilmiikhsan/multifinance-service/internal/module/transaction/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// FindTransactionByCustomerID mocks base method.
func (m *MockTransactionRepository) FindTransactionByCustomerID(ctx context.Context, req *dto.GetHistoryListTransactionRequest, customerID int) (*dto.GetHistoryListTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByCustomerID", ctx, req, customerID)
	ret0, _ := ret[0].(*dto.GetHistoryListTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionByCustomerID indicates an expected call of FindTransactionByCustomerID.
func (mr *MockTransactionRepositoryMockRecorder) FindTransactionByCustomerID(ctx, req, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByCustomerID", reflect.TypeOf((*MockTransactionRepository)(nil).FindTransactionByCustomerID), ctx, req, customerID)
}

// FindTransactionByIdAndCustomerID mocks base method.
func (m *MockTransactionRepository) FindTransactionByIdAndCustomerID(ctx context.Context, id, customerID int) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByIdAndCustomerID", ctx, id, customerID)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionByIdAndCustomerID indicates an expected call of FindTransactionByIdAndCustomerID.
func (mr *MockTransactionRepositoryMockRecorder) FindTransactionByIdAndCustomerID(ctx, id, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByIdAndCustomerID", reflect.TypeOf((*MockTransactionRepository)(nil).FindTransactionByIdAndCustomerID), ctx, id, customerID)
}

// InsertNewTransaction mocks base method.
func (m *MockTransactionRepository) InsertNewTransaction(ctx context.Context, tx *sql.Tx, data *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewTransaction", ctx, tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewTransaction indicates an expected call of InsertNewTransaction.
func (mr *MockTransactionRepositoryMockRecorder) InsertNewTransaction(ctx, tx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).InsertNewTransaction), ctx, tx, data)
}

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
	isgomock struct{}
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionService) CreateTransaction(ctx context.Context, req *dto.CreateTransactionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceMockRecorder) CreateTransaction(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionService)(nil).CreateTransaction), ctx, req)
}

// GetDetailTransaction mocks base method.
func (m *MockTransactionService) GetDetailTransaction(ctx context.Context, id, customerID int) (*dto.GetDetailTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailTransaction", ctx, id, customerID)
	ret0, _ := ret[0].(*dto.GetDetailTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailTransaction indicates an expected call of GetDetailTransaction.
func (mr *MockTransactionServiceMockRecorder) GetDetailTransaction(ctx, id, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailTransaction", reflect.TypeOf((*MockTransactionService)(nil).GetDetailTransaction), ctx, id, customerID)
}

// GetHistoryListTransction mocks base method.
func (m *MockTransactionService) GetHistoryListTransction(ctx context.Context, req *dto.GetHistoryListTransactionRequest, customerID int) (*dto.GetHistoryListTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryListTransction", ctx, req, customerID)
	ret0, _ := ret[0].(*dto.GetHistoryListTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryListTransction indicates an expected call of GetHistoryListTransction.
func (mr *MockTransactionServiceMockRecorder) GetHistoryListTransction(ctx, req, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryListTransction", reflect.TypeOf((*MockTransactionService)(nil).GetHistoryListTransction), ctx, req, customerID)
}
