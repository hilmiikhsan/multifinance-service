// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go
//
// Generated by this command:
//
//	mockgen -source=ports.go -destination=../service/service_mock_test.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	dto "github.com/hilmiikhsan/multifinance-service/internal/module/credit_limit/dto"
	entity "github.com/hilmiikhsan/multifinance-service/internal/module/credit_limit/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCreditLimitRepository is a mock of CreditLimitRepository interface.
type MockCreditLimitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreditLimitRepositoryMockRecorder
	isgomock struct{}
}

// MockCreditLimitRepositoryMockRecorder is the mock recorder for MockCreditLimitRepository.
type MockCreditLimitRepositoryMockRecorder struct {
	mock *MockCreditLimitRepository
}

// NewMockCreditLimitRepository creates a new mock instance.
func NewMockCreditLimitRepository(ctrl *gomock.Controller) *MockCreditLimitRepository {
	mock := &MockCreditLimitRepository{ctrl: ctrl}
	mock.recorder = &MockCreditLimitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditLimitRepository) EXPECT() *MockCreditLimitRepositoryMockRecorder {
	return m.recorder
}

// FindCreditLimitByCustomerID mocks base method.
func (m *MockCreditLimitRepository) FindCreditLimitByCustomerID(ctx context.Context, customerID int) (*[]entity.Limits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCreditLimitByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(*[]entity.Limits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCreditLimitByCustomerID indicates an expected call of FindCreditLimitByCustomerID.
func (mr *MockCreditLimitRepositoryMockRecorder) FindCreditLimitByCustomerID(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCreditLimitByCustomerID", reflect.TypeOf((*MockCreditLimitRepository)(nil).FindCreditLimitByCustomerID), ctx, customerID)
}

// FindLimitByCustomerAndTenor mocks base method.
func (m *MockCreditLimitRepository) FindLimitByCustomerAndTenor(ctx context.Context, tx *sql.Tx, customerID, tenorMonth int) (*entity.Limits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLimitByCustomerAndTenor", ctx, tx, customerID, tenorMonth)
	ret0, _ := ret[0].(*entity.Limits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLimitByCustomerAndTenor indicates an expected call of FindLimitByCustomerAndTenor.
func (mr *MockCreditLimitRepositoryMockRecorder) FindLimitByCustomerAndTenor(ctx, tx, customerID, tenorMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLimitByCustomerAndTenor", reflect.TypeOf((*MockCreditLimitRepository)(nil).FindLimitByCustomerAndTenor), ctx, tx, customerID, tenorMonth)
}

// InsertNewCreditLimit mocks base method.
func (m *MockCreditLimitRepository) InsertNewCreditLimit(ctx context.Context, tx *sql.Tx, data *entity.CreditLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewCreditLimit", ctx, tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewCreditLimit indicates an expected call of InsertNewCreditLimit.
func (mr *MockCreditLimitRepositoryMockRecorder) InsertNewCreditLimit(ctx, tx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewCreditLimit", reflect.TypeOf((*MockCreditLimitRepository)(nil).InsertNewCreditLimit), ctx, tx, data)
}

// MockCreditLimitService is a mock of CreditLimitService interface.
type MockCreditLimitService struct {
	ctrl     *gomock.Controller
	recorder *MockCreditLimitServiceMockRecorder
	isgomock struct{}
}

// MockCreditLimitServiceMockRecorder is the mock recorder for MockCreditLimitService.
type MockCreditLimitServiceMockRecorder struct {
	mock *MockCreditLimitService
}

// NewMockCreditLimitService creates a new mock instance.
func NewMockCreditLimitService(ctrl *gomock.Controller) *MockCreditLimitService {
	mock := &MockCreditLimitService{ctrl: ctrl}
	mock.recorder = &MockCreditLimitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditLimitService) EXPECT() *MockCreditLimitServiceMockRecorder {
	return m.recorder
}

// GetCreditLimits mocks base method.
func (m *MockCreditLimitService) GetCreditLimits(ctx context.Context, customerID int) (*[]dto.GetCreditLimitsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditLimits", ctx, customerID)
	ret0, _ := ret[0].(*[]dto.GetCreditLimitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditLimits indicates an expected call of GetCreditLimits.
func (mr *MockCreditLimitServiceMockRecorder) GetCreditLimits(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditLimits", reflect.TypeOf((*MockCreditLimitService)(nil).GetCreditLimits), ctx, customerID)
}
