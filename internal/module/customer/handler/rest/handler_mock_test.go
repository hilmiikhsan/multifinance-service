// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	dto "github.com/hilmiikhsan/multifinance-service/internal/module/customer/dto"
	entity "github.com/hilmiikhsan/multifinance-service/internal/module/customer/entity"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// FindCustomerByEmail mocks base method.
func (m *MockCustomerRepository) FindCustomerByEmail(ctx context.Context, email string) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomerByEmail indicates an expected call of FindCustomerByEmail.
func (mr *MockCustomerRepositoryMockRecorder) FindCustomerByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByEmail", reflect.TypeOf((*MockCustomerRepository)(nil).FindCustomerByEmail), ctx, email)
}

// FindCustomerByID mocks base method.
func (m *MockCustomerRepository) FindCustomerByID(ctx context.Context, id int) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByID", ctx, id)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomerByID indicates an expected call of FindCustomerByID.
func (mr *MockCustomerRepositoryMockRecorder) FindCustomerByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByID", reflect.TypeOf((*MockCustomerRepository)(nil).FindCustomerByID), ctx, id)
}

// InsertNewUser mocks base method.
func (m *MockCustomerRepository) InsertNewUser(ctx context.Context, tx *sql.Tx, data *entity.Customer) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, tx, data)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockCustomerRepositoryMockRecorder) InsertNewUser(ctx, tx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockCustomerRepository)(nil).InsertNewUser), ctx, tx, data)
}

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// GetCustomerProfile mocks base method.
func (m *MockCustomerService) GetCustomerProfile(ctx context.Context, id int) (*dto.GetCustomerProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerProfile", ctx, id)
	ret0, _ := ret[0].(*dto.GetCustomerProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerProfile indicates an expected call of GetCustomerProfile.
func (mr *MockCustomerServiceMockRecorder) GetCustomerProfile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerProfile", reflect.TypeOf((*MockCustomerService)(nil).GetCustomerProfile), ctx, id)
}
